
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/extraction/database/run_station_section_db.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_extraction_database_run_station_section_db.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_extraction_database_run_station_section_db.py:


Station Section
===============

The tutorial will go over the reading of station files from a database by
loading one that is included in the github repo. At the end, we plot a station
section of waveforms using built-in plotting tools.

Loading all modules
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 14-15

.. code-block:: default









.. GENERATED FROM PYTHON SOURCE LINES 18-19

External

.. GENERATED FROM PYTHON SOURCE LINES 19-29

.. code-block:: default

    from glob import glob
    import matplotlib.pyplot as plt
    from obspy import read, read_inventory, Stream

    # Internal
    from gf3d.source import CMTSOLUTION
    from gf3d.seismograms import GFManager
    from gf3d.process import process_stream, select_pairs
    from gf3d.plot.section import plotsection








.. GENERATED FROM PYTHON SOURCE LINES 30-31

Read observed data and event parameters

.. GENERATED FROM PYTHON SOURCE LINES 31-39

.. code-block:: default


    # CMTSOLUTION
    cmt = CMTSOLUTION.read('../../DATA/single_element_read/CMTSOLUTION')

    # Load Observed Data
    raw = read("../../DATA/single_element_read/traces/*.sac")
    inv = read_inventory("../../DATA/single_element_read/station.xml")








.. GENERATED FROM PYTHON SOURCE LINES 40-41

Get seismograms from the database

.. GENERATED FROM PYTHON SOURCE LINES 41-52

.. code-block:: default


    # Load subset
    gfm = GFManager(glob('../../DATA/single_element_read/DB/*/*/*.*.h5'))
    gfm.load_header_variables()

    # You will have to load a subset of elements first (just one here for storage reasons)
    gfm.get_elements(cmt.latitude, cmt.longitude, cmt.depth, 100, NGLL=5)

    # Finally you can read the seismograms.
    rp = gfm.get_seismograms(cmt)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    0: <HDF5 file "II.BFO.h5" (mode r)>
    2: <HDF5 file "IU.ANMO.h5" (mode r)>
    1: <HDF5 file "IU.HRV.h5" (mode r)>




.. GENERATED FROM PYTHON SOURCE LINES 53-60

.. code-block:: default


    obs = process_stream(raw, inv=inv, cmt=cmt, duration=3300)
    syn = process_stream(rp, cmt=cmt, duration=3300)

    # obs = raw
    # syn = rp








.. GENERATED FROM PYTHON SOURCE LINES 61-64

Note that the only 3 stations (II.BFO, IU.ANMO, IU.HRV) are in the example
database, which means that the observed data that we downloaded for the
example subset file includes other stations

.. GENERATED FROM PYTHON SOURCE LINES 64-67

.. code-block:: default


    pobs, psyn = select_pairs(obs, syn)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Cant find IU.SNZO..N
    Cant find IU.SNZO..E
    Cant find IU.SNZO..Z
    Cant find IU.CTAO..N
    Cant find IU.CTAO..E
    Cant find IU.CTAO..Z
    Cant find II.AAK..N
    Cant find II.AAK..E
    Cant find II.AAK..Z
    Cant find II.DGAR..N
    Cant find II.DGAR..E
    Cant find II.DGAR..Z
    Cant find II.KAPI..N
    Cant find II.KAPI..E
    Cant find II.KAPI..Z
    Cant find IU.YAK..N
    Cant find IU.YAK..E
    Cant find IU.YAK..Z
    Cant find IU.XMAS..N
    Cant find IU.XMAS..E
    Cant find IU.XMAS..Z
    Cant find IU.SBA..N
    Cant find IU.SBA..E
    Cant find IU.SBA..Z
    Cant find II.HOPE..N
    Cant find II.HOPE..E
    Cant find II.HOPE..Z
    Cant find IU.KOWA..N
    Cant find IU.KOWA..E
    Cant find IU.KOWA..Z
    Cant find IU.DAV..N
    Cant find IU.DAV..E
    Cant find IU.DAV..Z
    Cant find IU.MAJO..N
    Cant find IU.MAJO..E
    Cant find IU.MAJO..Z
    Cant find II.BORG..N
    Cant find II.BORG..E
    Cant find II.BORG..Z
    Cant find II.KDAK..N
    Cant find II.KDAK..E
    Cant find II.KDAK..Z




.. GENERATED FROM PYTHON SOURCE LINES 68-71

So, don't worry about the 'Cant find <Network>.<Station>..<Component>.

Plot section with the data

.. GENERATED FROM PYTHON SOURCE LINES 71-80

.. code-block:: default


    starttime = pobs[0].stats.starttime + 0
    endtime = starttime + 3300
    limits = (starttime, endtime)

    # Plots a section of observed and synthetic
    plotsection(pobs, psyn, cmt, comp='Z', lw=0.75, limits=limits)

    plt.show()



.. image-sg:: /examples/extraction/database/images/sphx_glr_run_station_section_db_001.svg
   :alt: Wed Sep 16 22:55:22 2015 Loc: -31.13dg, -72.09dg, 17.4km 
   :srcset: /examples/extraction/database/images/sphx_glr_run_station_section_db_001.svg
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.974 seconds)


.. _sphx_glr_download_examples_extraction_database_run_station_section_db.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: run_station_section_db.py <run_station_section_db.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: run_station_section_db.ipynb <run_station_section_db.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
